type token =
  | NUM of (int)
  | TRUE
  | FALSE
  | ID of (string)
  | INT
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | EQUAL
  | EQUALEQUAL
  | LE
  | LT
  | GE
  | GT
  | NOT
  | AND
  | OR
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | READ
  | PRINT
  | SEMICOLON
  | LET
  | IN
  | COMMA
  | ISZERO
  | LETREC
  | PROC
  | SET
  | NEWREF
  | DEREF
  | SETREF
  | BEGIN
  | END
  | LBRACE
  | RBRACE
  | LBLOCK
  | RBLOCK
  | LPAREN
  | RPAREN
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"

# 53 "parser.ml"
let yytransl_const = [|
  258 (* TRUE *);
  259 (* FALSE *);
  261 (* INT *);
  262 (* PLUS *);
  263 (* MINUS *);
  264 (* STAR *);
  265 (* SLASH *);
  266 (* EQUAL *);
  267 (* EQUALEQUAL *);
  268 (* LE *);
  269 (* LT *);
  270 (* GE *);
  271 (* GT *);
  272 (* NOT *);
  273 (* AND *);
  274 (* OR *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  278 (* WHILE *);
  279 (* DO *);
  280 (* READ *);
  281 (* PRINT *);
  282 (* SEMICOLON *);
  283 (* LET *);
  284 (* IN *);
  285 (* COMMA *);
  286 (* ISZERO *);
  287 (* LETREC *);
  288 (* PROC *);
  289 (* SET *);
  290 (* NEWREF *);
  291 (* DEREF *);
  292 (* SETREF *);
  293 (* BEGIN *);
  294 (* END *);
  295 (* LBRACE *);
  296 (* RBRACE *);
  297 (* LBLOCK *);
  298 (* RBLOCK *);
  299 (* LPAREN *);
  300 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* NUM *);
  260 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\003\000\003\000\003\000\003\000\002\000\
\006\000\006\000\009\000\005\000\004\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\003\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\014\000\000\000\000\000\000\000\006\000\
\007\000\000\000\000\000\000\000\000\000\013\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\011\000\012\000"

let yysindex = "\255\255\
\041\255\000\000\000\000\000\000\041\255\000\255\041\255\005\255\
\215\254\041\255\000\000\003\000\012\255\015\255\085\255\235\254\
\023\255\004\255\041\255\041\255\041\255\041\255\000\000\041\255\
\041\255\024\255\242\254\000\000\008\255\254\254\254\254\000\000\
\000\000\081\255\068\255\002\255\041\255\000\000\041\255\041\255\
\039\255\085\255\085\255\085\255\041\255\072\255\041\255\085\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\054\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\033\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\086\000\107\000\139\000\000\000\000\000\000\000\160\000"

let yygindex = "\000\000\
\000\000\019\000"

let yytablesize = 460
let yytable = "\001\000\
\004\000\017\000\023\000\014\000\003\000\021\000\022\000\004\000\
\016\000\019\000\020\000\021\000\022\000\019\000\020\000\021\000\
\022\000\019\000\020\000\021\000\022\000\026\000\005\000\013\000\
\025\000\015\000\027\000\036\000\018\000\037\000\006\000\024\000\
\005\000\007\000\008\000\009\000\029\000\030\000\031\000\032\000\
\033\000\003\000\034\000\035\000\004\000\041\000\010\000\028\000\
\045\000\000\000\000\000\038\000\000\000\008\000\000\000\042\000\
\000\000\043\000\044\000\005\000\000\000\000\000\000\000\046\000\
\000\000\048\000\000\000\006\000\000\000\000\000\007\000\008\000\
\009\000\019\000\020\000\021\000\022\000\019\000\020\000\021\000\
\022\000\000\000\000\000\010\000\000\000\012\000\019\000\020\000\
\021\000\022\000\019\000\020\000\021\000\022\000\000\000\040\000\
\000\000\000\000\000\000\047\000\000\000\039\000\000\000\000\000\
\000\000\000\000\009\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\004\000\000\000\000\000\004\000\000\000\004\000\004\000\
\019\000\020\000\021\000\022\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\004\000\004\000\004\000\000\000\000\000\
\000\000\000\000\000\000\004\000\004\000\000\000\004\000\004\000\
\004\000\005\000\000\000\000\000\005\000\000\000\005\000\005\000\
\000\000\000\000\000\000\004\000\004\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\005\000\005\000\008\000\000\000\
\000\000\008\000\000\000\005\000\005\000\000\000\005\000\005\000\
\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\008\000\008\000\008\000\005\000\005\000\000\000\000\000\000\000\
\008\000\008\000\000\000\008\000\008\000\008\000\012\000\000\000\
\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\
\008\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000\012\000\012\000\009\000\000\000\000\000\009\000\000\000\
\012\000\012\000\000\000\012\000\012\000\012\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\009\000\009\000\009\000\
\012\000\012\000\000\000\000\000\000\000\009\000\009\000\000\000\
\009\000\009\000\009\000\010\000\000\000\000\000\010\000\000\000\
\000\000\000\000\000\000\000\000\000\000\009\000\009\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\010\000\010\000\
\011\000\000\000\000\000\011\000\000\000\010\000\010\000\000\000\
\010\000\010\000\010\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\000\011\000\011\000\010\000\010\000\000\000\
\000\000\000\000\011\000\011\000\000\000\011\000\011\000\011\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\000\011\000"

let yycheck = "\001\000\
\000\000\043\001\000\000\004\001\001\001\008\001\009\001\004\001\
\004\001\006\001\007\001\008\001\009\001\006\001\007\001\008\001\
\009\001\006\001\007\001\008\001\009\001\043\001\019\001\005\000\
\010\001\007\000\004\001\004\001\010\000\044\001\027\001\020\001\
\000\000\030\001\031\001\032\001\018\000\019\000\020\000\021\000\
\022\000\001\001\024\000\025\000\004\001\044\001\043\001\044\001\
\010\001\255\255\255\255\044\001\255\255\000\000\255\255\037\000\
\255\255\039\000\040\000\019\001\255\255\255\255\255\255\045\000\
\255\255\047\000\255\255\027\001\255\255\255\255\030\001\031\001\
\032\001\006\001\007\001\008\001\009\001\006\001\007\001\008\001\
\009\001\255\255\255\255\043\001\255\255\000\000\006\001\007\001\
\008\001\009\001\006\001\007\001\008\001\009\001\255\255\028\001\
\255\255\255\255\255\255\028\001\255\255\021\001\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\255\255\255\255\004\001\255\255\006\001\007\001\
\006\001\007\001\008\001\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\027\001\028\001\255\255\030\001\031\001\
\032\001\001\001\255\255\255\255\004\001\255\255\006\001\007\001\
\255\255\255\255\255\255\043\001\044\001\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\021\001\001\001\255\255\
\255\255\004\001\255\255\027\001\028\001\255\255\030\001\031\001\
\032\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\043\001\044\001\255\255\255\255\255\255\
\027\001\028\001\255\255\030\001\031\001\032\001\001\001\255\255\
\255\255\004\001\255\255\255\255\255\255\255\255\255\255\255\255\
\043\001\044\001\255\255\255\255\255\255\255\255\255\255\255\255\
\019\001\020\001\021\001\001\001\255\255\255\255\004\001\255\255\
\027\001\028\001\255\255\030\001\031\001\032\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\021\001\
\043\001\044\001\255\255\255\255\255\255\027\001\028\001\255\255\
\030\001\031\001\032\001\001\001\255\255\255\255\004\001\255\255\
\255\255\255\255\255\255\255\255\255\255\043\001\044\001\255\255\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\021\001\
\001\001\255\255\255\255\004\001\255\255\027\001\028\001\255\255\
\030\001\031\001\032\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\020\001\021\001\043\001\044\001\255\255\
\255\255\255\255\027\001\028\001\255\255\030\001\031\001\032\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\043\001\044\001"

let yynames_const = "\
  TRUE\000\
  FALSE\000\
  INT\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  SLASH\000\
  EQUAL\000\
  EQUALEQUAL\000\
  LE\000\
  LT\000\
  GE\000\
  GT\000\
  NOT\000\
  AND\000\
  OR\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  READ\000\
  PRINT\000\
  SEMICOLON\000\
  LET\000\
  IN\000\
  COMMA\000\
  ISZERO\000\
  LETREC\000\
  PROC\000\
  SET\000\
  NEWREF\000\
  DEREF\000\
  SETREF\000\
  BEGIN\000\
  END\000\
  LBRACE\000\
  RBRACE\000\
  LBLOCK\000\
  RBLOCK\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  NUM\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 27 "parser.mly"
            ( _1 )
# 322 "parser.ml"
               : Type.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 31 "parser.mly"
        ( Type.CONST _1 )
# 329 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 32 "parser.mly"
       ( Type.VAR _1 )
# 336 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 33 "parser.mly"
                  ( Type.ADD (_1,_3) )
# 344 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 34 "parser.mly"
                   ( Type.SUB (_1,_3) )
# 352 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 35 "parser.mly"
                  ( Type.MUL (_1,_3) )
# 360 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 36 "parser.mly"
                   ( Type.DIV (_1,_3) )
# 368 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 37 "parser.mly"
               ( Type.ISZERO _2 )
# 375 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 38 "parser.mly"
                             ( Type.IF (_2,_4,_6) )
# 384 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 39 "parser.mly"
                            ( Type.LET (_2,_4,_6) )
# 393 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 40 "parser.mly"
                                                ( Type.LETREC (_2,_4,_7,_9) )
# 403 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 41 "parser.mly"
                              ( Type.PROC (_3,_5) )
# 411 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 42 "parser.mly"
                          ( Type.CALL (_2,_3) )
# 419 "parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 43 "parser.mly"
                      ( _2 )
# 426 "parser.ml"
               : 'exp))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Type.program)
;;
# 45 "parser.mly"

let parse_error s = print_endline s
# 454 "parser.ml"
